{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./environment.service\";\nexport class RestApiService {\n  constructor(http, environment) {\n    this.http = http;\n    this.environment = environment;\n    this.apiUrl = this.environment.getApiUrl();\n  }\n  /**\r\n   * will attach '?' if user privides a queyr param\r\n   * if doesn't provide a query param no need to map anythning\r\n   * to array and returns ''\r\n   * if qp has query params then they will be joined on &\r\n   */\n  correctrFOrmatForQueryURL(qp) {\n    if (!qp) {\n      return '';\n    }\n    const qpAsStr = this.mapQueryParmsToURL(qp);\n    return qpAsStr.length === 0 ? '' : `?${qpAsStr.join('&')}`;\n  }\n  /**\r\n   *\r\n   * @param qp\r\n   * @returns an array of key value pairs\r\n   *\r\n   */\n  mapQueryParmsToURL(qp) {\n    return Object.keys(qp).map(key => `${key}=${qp[key]}`);\n  }\n  getRemove(id, route, qp = {}, method = 'get') {\n    const cfqu = this.correctrFOrmatForQueryURL(qp);\n    return this.http[method](`${this.apiUrl}${route}${id ? '/' + id : ''}${cfqu}`);\n  }\n  postPatch(route, data, id, qp = {}, method = 'post') {\n    const cfqu = this.correctrFOrmatForQueryURL(qp);\n    return this.http[method](`${this.apiUrl}/${route}${id ? '/' + id : ''}${cfqu}`, data);\n  }\n  static #_ = this.ɵfac = function RestApiService_Factory(t) {\n    return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EnvironmentService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestApiService,\n    factory: RestApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SACEA,UAAU,QAGL,sBAAsB;AAC7B,SACEC,UAAU,QAEL,MAAM;;;;AAqBb,OAAM,MAAOC,cAAc;EAEzBC,YACUC,IAAgB,EAChBC,WAA+B;IAD/B,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IAGjB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,WAAW,CAACE,SAAS,EAAE;EAC5C;EAGF;;;;;;EAMQC,yBAAyB,CAACC,EAAa;IAC7C,IAAI,CAACA,EAAE,EAAE;MACP,OAAO,EAAE;;IAEX,MAAMC,OAAO,GAAG,IAAI,CAACC,kBAAkB,CAACF,EAAE,CAAC;IAC3C,OAAOC,OAAO,CAACE,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,IAAIF,OAAO,CAACG,IAAI,CAAC,GAAG,CAAC,EAAE;EAC5D;EAED;;;;;;EAMSF,kBAAkB,CAACF,EAAa;IACtC,OAAOK,MAAM,CAACC,IAAI,CAACN,EAAE,CAAC,CAACO,GAAG,CAAEC,GAAW,IAAK,GAAGA,GAAG,IAAIR,EAAE,CAACQ,GAAG,CAAC,EAAE,CAAC;EAClE;EAEAC,SAAS,CACPC,EAAiB,EACjBC,KAAa,EACbX,KAAgB,EAAE,EAClBY,SAA2B,KAAK;IAEhC,MAAMC,IAAI,GAAG,IAAI,CAACd,yBAAyB,CAACC,EAAE,CAAC;IAC/C,OAAO,IAAI,CAACL,IAAI,CAACiB,MAAM,CAAC,CACtB,GAAG,IAAI,CAACf,MAAM,GAAGc,KAAK,GAAGD,EAAE,GAAG,GAAG,GAAGA,EAAE,GAAG,EAAE,GAAGG,IAAI,EAAE,CAC3B;EAC7B;EAEAC,SAAS,CACPH,KAAa,EACbI,IAAS,EACTL,EAAU,EACVV,KAAgB,EAAE,EAClBY,SAA2B,MAAM;IAEjC,MAAMC,IAAI,GAAG,IAAI,CAACd,yBAAyB,CAACC,EAAE,CAAC;IAC/C,OAAO,IAAI,CAACL,IAAI,CAACiB,MAAM,CAAC,CACtB,GAAG,IAAI,CAACf,MAAM,IAAIc,KAAK,GAAGD,EAAE,GAAG,GAAG,GAAGA,EAAE,GAAG,EAAE,GAAGG,IAAI,EAAE,EAAEE,IAAI,CAClC;EAC7B;EAAC;qBA1DUtB,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAuB,SAAdvB,cAAc;IAAAwB,YAFb;EAAM","names":["HttpClient","Observable","RestApiService","constructor","http","environment","apiUrl","getApiUrl","correctrFOrmatForQueryURL","qp","qpAsStr","mapQueryParmsToURL","length","join","Object","keys","map","key","getRemove","id","route","method","cfqu","postPatch","data","factory","providedIn"],"sourceRoot":"","sources":["F:\\WorkPersonal\\PErsonalSite\\github\\characterCreater\\frontEnd\\src\\services\\rest-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpParams,\n  HttpResponse\n} from '@angular/common/http';\nimport {\n  Observable,\n  throwError, of\n} from 'rxjs';\nimport {\n  catchError,\n  map,\n  retry\n} from 'rxjs/operators';\nimport {\n  EnvironmentService\n} from './environment.service';\nimport {\n  getLocaleExtraDayPeriodRules\n} from '@angular/common';\n\n\ninterface ReqParams {\n  [key: string]: string | number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestApiService {\nprivate readonly apiUrl: string;\n  constructor(\n    private http: HttpClient,\n    private environment: EnvironmentService,\n\n    ) {\n      this.apiUrl = this.environment.getApiUrl();\n    }\n\n\n  /**\n   * will attach '?' if user privides a queyr param\n   * if doesn't provide a query param no need to map anythning\n   * to array and returns ''\n   * if qp has query params then they will be joined on &\n   */\n  private correctrFOrmatForQueryURL(qp: ReqParams): string {\n    if (!qp) {\n      return '';\n    }\n    const qpAsStr = this.mapQueryParmsToURL(qp);\n    return qpAsStr.length === 0 ? '' : `?${qpAsStr.join('&')}`;\n  }\n\n /**\n  *\n  * @param qp\n  * @returns an array of key value pairs\n  *\n  */\n  private mapQueryParmsToURL(qp: ReqParams): Array<string> {\n    return Object.keys(qp).map((key: string) => `${key}=${qp[key]}`);\n  }\n\n  getRemove<returnType>(\n    id: number | null,\n    route: string,\n    qp: ReqParams = {},\n    method: 'get' | 'delete' = 'get'\n  ): Observable<returnType> {\n    const cfqu = this.correctrFOrmatForQueryURL(qp);\n    return this.http[method](\n      `${this.apiUrl}${route}${id ? '/' + id : ''}${cfqu}`\n    ) as Observable<returnType>;\n  }\n\n  postPatch<returnType>(\n    route: string,\n    data: any,\n    id: number,\n    qp: ReqParams = {},\n    method: 'post' | 'patch' = 'post'\n  ): Observable<returnType> {\n    const cfqu = this.correctrFOrmatForQueryURL(qp);\n    return this.http[method](\n      `${this.apiUrl}/${route}${id ? '/' + id : ''}${cfqu}`, data\n    ) as Observable<returnType>;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}